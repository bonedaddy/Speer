import React, { Component } from 'react';
import './app.css';
import BarChart from './charts/BarChart';

import {
  DisplayLogEvents,

  DisplayMainEvent,
	DisplayLogEvent,
	DisplayGraphsEvent,
	DisplayStatsEvent
} from './nav/Pages';

import NavBar from './nav/NavBar';

import LogDisplay from './logs/LogDisplay';
import LogFetcher from './logs/LogFetcher';
import { parseEntry } from './logs/Entries';

import {Metric, Metrics} from './metrics/Metrics';
import Canvas from './graph/Canvas';

// time window size for metric aggregation
const windowSize = 2;

export default class App extends Component {
  constructor(props) {
    super(props);

    this.state = {
      username : null,

      // metrics
      metrics : {
        load : {
          data    : [],
          handler : new Metric(windowSize, Metrics.load).data,
        },
      },

      // displayable pages
      pages : this.initialDisplayedPages(),

      // current log being processed
      logName : "mocklog",

      // current log entries
      logEntries : [],
    };

    // bind methods
    this.handleDisplayEvents = this.handleDisplayEvents.bind(this);
    this.fetchLogs = this.fetchLogs.bind(this);
    this.onLogUpdate = this.onLogUpdate.bind(this);
    this.onNewLog = this.onNewLog.bind(this);
  }


  // initial nework requests
  componentDidMount() {
    // user name: dummy
    fetch('/api/getUsername')
      .then(res => res.json())
      .then(user => this.setState({ username: user.username }));

    // fetch the default log
    this.fetchLogs();

    // add listeners for events associated with each page change
    for (let e of DisplayLogEvents) {
        window.addEventListener(e, this.handleDisplayEvents);
    }
  }


  // *************************** Handle data sources ***************************
  fetchLogs() {
    new LogFetcher(this.state.logName).fetchLog().then((rawEntries) => {
      let entries = rawEntries.map(parseEntry);

      this.setState(Object.assign(this.state, {
        logEntries : entries,
      }));

      // call updates generated by new log
      this.onLogUpdate(entries);
    });
  }

  onNewLog(newLogName) {
    // one of the components updated the log we use
    this.setState(Object.assign(this.state, {
      logName : newLogName
    }));

    this.fetchLogs();
  }

  onLogUpdate(entries) {
    // update each individual metric
    let metrics = this.state.metrics;
    for (let metricName in metrics) {
      // compute the new data based on entries
      metrics[metricName].data = metrics[metricName].handler(entries);
    }

    // update metrics
    this.setState(Object.assign(this.state, {
      metrics : metrics
    }));
  }

  // ******************************* Handle pages ******************************
  initialDisplayedPages() {
    let pages = {};
    for (let e of DisplayLogEvents) {
      pages[e] = false;
    }
    pages[DisplayMainEvent] = true;
    return pages;
  }

  handleDisplayEvents(event) {
    // change the displayed page
    let pages = this.state.pages;
    for (let k in pages) {
      if (pages.hasOwnProperty(k)) {
        pages[k] = false;
      }
    }
    pages[event.type] = true;

    this.setState(state => ({
      'pages' : pages
    }));
  }

  render() {
    const username = this.state.username;
    const metrics  = this.state.metrics;
    const pages    = this.state.pages;
    const entries  = this.state.logEntries;

    return (<div>
      <NavBar/>

      <div>
        {pages[DisplayLogEvent] ?
          <LogDisplay
            entries={entries}
            handleLogUpdate={this.onNewLog}/> :
          null
        }
      </div>

      <div>
        {pages[DisplayGraphsEvent] ?
          <Canvas
            id="canvas1"
            data={entries}
            size={[500,500]}
          /> :
          null
        }
      </div>

      <div>
        {pages[DisplayStatsEvent] ?
          <div>
            <BarChart
              id="chart1"
              data={metrics.load.data}
              size={[500,500]}
              margin={60}
              windowSize={windowSize}
            />
            <BarChart
              id="chart2"
              data={metrics.load.data}
              size={[500,500]}
              margin={60}
              windowSize={windowSize}
            />
            <BarChart
              id="chart3"
              data={metrics.load.data}
              size={[500,500]}
              margin={60}
              windowSize={windowSize}
            />
          </div>:
            null
        }
      </div>
    </div>);
  }
}
